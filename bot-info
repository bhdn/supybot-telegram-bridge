#!/usr/bin/python
###
# Copyright (c) 2015, Bogdano Arendartchuk
# All rights reserved.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
#
#   * Redistributions of source code must retain the above copyright notice,
#     this list of conditions, and the following disclaimer.
#   * Redistributions in binary form must reproduce the above copyright notice,
#     this list of conditions, and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#   * Neither the name of the author of this software nor the name of
#     contributors to this software may be used to endorse or promote products
#     derived from this software without specific prior written consent.
#
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED.  IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
import sys
import os
import telegram


def die(msg):
    sys.stderr.write(msg + "\n")
    sys.exit(1)


def check(reply):
    if not reply.get("ok"):
        die("request failed: %r" % reply)
    return reply


def main(argv):
    if len(argv) != 2:
        die("usage: %s <bot token as provided by @BotFather>")
    else:
        token = argv[1]
        try:
            raw_id, _ = token.split(":", 1)
            bot_id = int(raw_id)
        except ValueError:
            die("expected token format <ID>:<HASH>")
        found = False
        tg = telegram.TelegramBot(token)
        try:
            check(tg.get_me())
            for token, reply in tg.updates():
                participant = reply.get("new_chat_participant")
                if participant and participant.get("id") == bot_id:
                    chat = reply.get("chat")
                    if chat:
                        print("title: %s tgChatId: %s" % (chat.get("title"),
                                                          chat.get("id")))
                        found = True
        except telegram.TelegramError as e:
            die("error: %s" % e)
        if found:
            print()
            print("Please check if the intended chat shows up above and use "
                  "tgChatId in the bot configuration.")
        else:
            die("It seems the bot did not join any chat in the last 24 "
                "hours. Please check whether the token is correct and "
                "the bot has actually joined any chat.")

if __name__ == "__main__":
    main(sys.argv)
